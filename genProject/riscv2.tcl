#*****************************************************************************************
# Vivado (TM) v2023.1 (64-bit)
#
# riscv2.tcl: Tcl script for re-creating project 'riscv2'
#
# Generated by Vivado on Wed Jan 08 02:44:14 +0000 2025
# IP Build 3864474 on Sun May  7 20:36:21 MDT 2023
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (riscv2.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "/home/user/project/riscv2/genProject/riscv2/riscv2.srcs/utils_1/imports/synth_1/hardwareWrapper.dcp"
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/user/project/riscv2/src/PC.v"
#    "/home/user/project/riscv2/src/ModeFSM.v"
#    "/home/user/project/riscv2/src/FetchLatch.v"
#    "/home/user/project/riscv2/src/Decode.v"
#    "/home/user/project/riscv2/src/ExecStage.v"
#    "/home/user/project/riscv2/src/RegFile.v"
#    "/home/user/project/riscv2/src/RegFileWriteArbiter.v"
#    "/home/user/project/riscv2/src/or.v"
#    "/home/user/project/riscv2/bd/riscvTop/hdl/riscvTop_wrapper.v"
#    "/home/user/project/riscv2/src/hardwareWrapper.v"
#    "/home/user/project/riscv2/src/MemIO.v"
#    "/home/user/project/riscv2/src/MemInputCtrl.v"
#    "/home/user/project/riscv2/src/MemOutputCtrl.v"
#    "/home/user/project/riscv2/src/MemoryMappedIO.v"
#    "/home/user/project/riscv2/src/RamIO.v"
#    "/home/user/project/riscv2/sim/RamIO_tb.v"
#    "/home/user/project/riscv2/src/RamOpLatch.v"
#    "/home/user/project/riscv2/src/RomIO.v"
#    "/home/user/project/riscv2/src/and.v"
#    "/home/user/project/riscv2/sim/fetch_tb.v"
#    "/home/user/project/riscv2/sim/ramTop_tb.v"
#    "/home/user/project/riscv2/sim/top_tb.v"
#    "/home/user/project/riscv2/bd/ramTop/hdl/ramTop_wrapper.v"
#    "/home/user/project/riscv2/ips/dualPortRAM32kx32/dualPortRAM32kx32.xci"
#    "/home/user/project/riscv2/constraints/constraints.xdc"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/riscv2/riscv2.srcs/utils_1/imports/synth_1/hardwareWrapper.dcp"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set files [list \
 "[file normalize "$origin_dir/../src/PC.v"]"\
 "[file normalize "$origin_dir/../src/ModeFSM.v"]"\
 "[file normalize "$origin_dir/../src/FetchLatch.v"]"\
 "[file normalize "$origin_dir/../src/Decode.v"]"\
 "[file normalize "$origin_dir/../src/ExecStage.v"]"\
 "[file normalize "$origin_dir/../src/RegFile.v"]"\
 "[file normalize "$origin_dir/../src/RegFileWriteArbiter.v"]"\
 "[file normalize "$origin_dir/../src/or.v"]"\
 "[file normalize "$origin_dir/../bd/riscvTop/hdl/riscvTop_wrapper.v"]"\
 "[file normalize "$origin_dir/../src/hardwareWrapper.v"]"\
 "[file normalize "$origin_dir/../src/MemIO.v"]"\
 "[file normalize "$origin_dir/../src/MemInputCtrl.v"]"\
 "[file normalize "$origin_dir/../src/MemOutputCtrl.v"]"\
 "[file normalize "$origin_dir/../src/MemoryMappedIO.v"]"\
 "[file normalize "$origin_dir/../src/RamIO.v"]"\
 "[file normalize "$origin_dir/../sim/RamIO_tb.v"]"\
 "[file normalize "$origin_dir/../src/RamOpLatch.v"]"\
 "[file normalize "$origin_dir/../src/RomIO.v"]"\
 "[file normalize "$origin_dir/../src/and.v"]"\
 "[file normalize "$origin_dir/../sim/fetch_tb.v"]"\
 "[file normalize "$origin_dir/../sim/ramTop_tb.v"]"\
 "[file normalize "$origin_dir/../sim/top_tb.v"]"\
 "[file normalize "$origin_dir/../bd/ramTop/hdl/ramTop_wrapper.v"]"\
 "[file normalize "$origin_dir/../ips/dualPortRAM32kx32/dualPortRAM32kx32.xci"]"\
 "[file normalize "$origin_dir/../constraints/constraints.xdc"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  set paths [list \
 "[file normalize "$origin_dir/../../../../../ip_repo"]"]"\
  ]
  foreach ipath $paths {
    if { ![file isdirectory $ipath] } {
      puts " Could not access $ipath "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "riscv2"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "riscv2.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/riscv2"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7z007sclg400-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7z007sclg400-1" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "sim_compile_state" -value "1" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "2" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "2" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "2" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "3" -objects $obj
set_property -name "xpm_libraries" -value "XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/../ip_repo"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../src/PC.v"] \
 [file normalize "${origin_dir}/../src/ModeFSM.v"] \
 [file normalize "${origin_dir}/../src/FetchLatch.v"] \
 [file normalize "${origin_dir}/../src/Decode.v"] \
 [file normalize "${origin_dir}/../src/ExecStage.v"] \
 [file normalize "${origin_dir}/../src/RegFile.v"] \
 [file normalize "${origin_dir}/../src/RegFileWriteArbiter.v"] \
 [file normalize "${origin_dir}/../src/or.v"] \
 [file normalize "${origin_dir}/../bd/riscvTop/hdl/riscvTop_wrapper.v"] \
 [file normalize "${origin_dir}/../src/hardwareWrapper.v"] \
 [file normalize "${origin_dir}/../src/MemIO.v"] \
 [file normalize "${origin_dir}/../src/MemInputCtrl.v"] \
 [file normalize "${origin_dir}/../src/MemOutputCtrl.v"] \
 [file normalize "${origin_dir}/../src/MemoryMappedIO.v"] \
 [file normalize "${origin_dir}/../src/RamIO.v"] \
 [file normalize "${origin_dir}/../sim/RamIO_tb.v"] \
 [file normalize "${origin_dir}/../src/RamOpLatch.v"] \
 [file normalize "${origin_dir}/../src/RomIO.v"] \
 [file normalize "${origin_dir}/../src/and.v"] \
 [file normalize "${origin_dir}/../sim/fetch_tb.v"] \
 [file normalize "${origin_dir}/../sim/ramTop_tb.v"] \
 [file normalize "${origin_dir}/../sim/top_tb.v"] \
 [file normalize "${origin_dir}/../bd/ramTop/hdl/ramTop_wrapper.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "dataflow_viewer_settings" -value "min_width=16" -objects $obj
set_property -name "top" -value "hardwareWrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../ips/dualPortRAM32kx32/dualPortRAM32kx32.xci"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../ips/dualPortRAM32kx32/dualPortRAM32kx32.xci"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset file properties for local files
# None

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/../constraints/constraints.xdc"]"
set file_added [add_files -norecurse -fileset $obj [list $file]]
set file "$origin_dir/../constraints/constraints.xdc"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7z007sclg400-1" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "ramTop_tb" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/riscv2/riscv2.srcs/utils_1/imports/synth_1/hardwareWrapper.dcp" ]\
]
set imported_files [import_files -fileset utils_1 $files]

# Set 'utils_1' fileset file properties for remote files
# None

# Set 'utils_1' fileset file properties for local files
set file "synth_1/hardwareWrapper.dcp"
set file_obj [get_files -of_objects [get_filesets utils_1] [list "*$file"]]
set_property -name "netlist_only" -value "0" -objects $file_obj


# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files PC.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/PC.v
}
if { [get_files ModeFSM.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/ModeFSM.v
}
if { [get_files FetchLatch.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/FetchLatch.v
}
if { [get_files Decode.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/Decode.v
}
if { [get_files ExecStage.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/ExecStage.v
}
if { [get_files RegFile.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/RegFile.v
}
if { [get_files RegFileWriteArbiter.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/RegFileWriteArbiter.v
}
if { [get_files or.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/or.v
}


# Proc to create BD riscvTop
proc cr_bd_riscvTop { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# PC, ModeFSM, FetchLatch, Decode, RegFile, RegFileWriteArbiter, orGate, ExecStage



  # CHANGE DESIGN NAME HERE
  set design_name riscvTop

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  user.org:user:ramTop:1.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  PC\
  ModeFSM\
  FetchLatch\
  Decode\
  RegFile\
  RegFileWriteArbiter\
  orGate\
  ExecStage\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set busErr [ create_bd_port -dir O busErr ]
  set r1ToEdge [ create_bd_port -dir O -from 31 -to 0 r1ToEdge ]
  set addrB [ create_bd_port -dir O -from 31 -to 0 addrB ]
  set clk [ create_bd_port -dir I -type clk -freq_hz 1000000 clk ]

  # Create instance: ramTop_0, and set properties
  set ramTop_0 [ create_bd_cell -type ip -vlnv user.org:user:ramTop:1.0 ramTop_0 ]

  # Create instance: PC_0, and set properties
  set block_name PC
  set block_cell_name PC_0
  if { [catch {set PC_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $PC_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: ModeFSM_0, and set properties
  set block_name ModeFSM
  set block_cell_name ModeFSM_0
  if { [catch {set ModeFSM_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ModeFSM_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: FetchLatch_0, and set properties
  set block_name FetchLatch
  set block_cell_name FetchLatch_0
  if { [catch {set FetchLatch_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $FetchLatch_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Decode_0, and set properties
  set block_name Decode
  set block_cell_name Decode_0
  if { [catch {set Decode_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Decode_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: RegFile_0, and set properties
  set block_name RegFile
  set block_cell_name RegFile_0
  if { [catch {set RegFile_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $RegFile_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: RegFileWriteArbiter_0, and set properties
  set block_name RegFileWriteArbiter
  set block_cell_name RegFileWriteArbiter_0
  if { [catch {set RegFileWriteArbiter_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $RegFileWriteArbiter_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: orGate_0, and set properties
  set block_name orGate
  set block_cell_name orGate_0
  if { [catch {set orGate_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $orGate_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: ExecStage_0, and set properties
  set block_name ExecStage
  set block_cell_name ExecStage_0
  if { [catch {set ExecStage_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ExecStage_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net Decode_0_aluOp [get_bd_pins Decode_0/aluOp] [get_bd_pins ExecStage_0/aluOp]
  connect_bd_net -net Decode_0_aluToReg [get_bd_pins Decode_0/aluToReg] [get_bd_pins RegFileWriteArbiter_0/aluToReg]
  connect_bd_net -net Decode_0_branch [get_bd_pins Decode_0/branch] [get_bd_pins ExecStage_0/branch]
  connect_bd_net -net Decode_0_imm [get_bd_pins Decode_0/imm] [get_bd_pins ExecStage_0/imm]
  connect_bd_net -net Decode_0_jal [get_bd_pins Decode_0/jal] [get_bd_pins ExecStage_0/jal]
  connect_bd_net -net Decode_0_jalr [get_bd_pins Decode_0/jalr] [get_bd_pins ExecStage_0/jalr]
  connect_bd_net -net Decode_0_memOp [get_bd_pins Decode_0/memOp] [get_bd_pins ExecStage_0/memOpIn]
  connect_bd_net -net Decode_0_memSize [get_bd_pins Decode_0/memSize] [get_bd_pins ExecStage_0/memSizeIn]
  connect_bd_net -net Decode_0_pc [get_bd_pins Decode_0/pc] [get_bd_pins ExecStage_0/pc]
  connect_bd_net -net Decode_0_rd [get_bd_pins Decode_0/rd] [get_bd_pins RegFile_0/wa]
  connect_bd_net -net Decode_0_regWriteCollision [get_bd_pins Decode_0/regWriteCollision] [get_bd_pins RegFileWriteArbiter_0/collision] [get_bd_pins ModeFSM_0/regWriteCollision]
  connect_bd_net -net Decode_0_rs1 [get_bd_pins Decode_0/rs1] [get_bd_pins RegFile_0/ra1]
  connect_bd_net -net Decode_0_rs2 [get_bd_pins Decode_0/rs2] [get_bd_pins RegFile_0/ra2]
  connect_bd_net -net Decode_0_selA [get_bd_pins Decode_0/selA] [get_bd_pins ExecStage_0/selA]
  connect_bd_net -net Decode_0_selB [get_bd_pins Decode_0/selB] [get_bd_pins ExecStage_0/selB]
  connect_bd_net -net ExecStage_0_aluToMem [get_bd_pins ExecStage_0/aluToMem] [get_bd_pins ramTop_0/alu]
  connect_bd_net -net ExecStage_0_aluToRegFile [get_bd_pins ExecStage_0/aluToRegFile] [get_bd_pins RegFileWriteArbiter_0/aluVal]
  connect_bd_net -net ExecStage_0_memDin [get_bd_pins ExecStage_0/memDin] [get_bd_pins ramTop_0/din]
  connect_bd_net -net ExecStage_0_memOp [get_bd_pins ExecStage_0/memOp] [get_bd_pins ramTop_0/memOp]
  connect_bd_net -net ExecStage_0_memSize [get_bd_pins ExecStage_0/memSize] [get_bd_pins ramTop_0/memSize]
  connect_bd_net -net ExecStage_0_pcSel [get_bd_pins ExecStage_0/pcSel] [get_bd_pins PC_0/sel] [get_bd_pins ModeFSM_0/branchJump]
  connect_bd_net -net ExecStage_0_pcVect [get_bd_pins ExecStage_0/pcVect] [get_bd_pins PC_0/vect]
  connect_bd_net -net FetchLatch_0_instr [get_bd_pins FetchLatch_0/instr] [get_bd_pins Decode_0/instruction]
  connect_bd_net -net FetchLatch_0_pc [get_bd_pins FetchLatch_0/pc] [get_bd_pins Decode_0/pc_in]
  connect_bd_net -net ModeFSM_0_FLUSH_HOLD [get_bd_pins ModeFSM_0/FLUSH_HOLD] [get_bd_pins orGate_0/b]
  connect_bd_net -net ModeFSM_0_MASTER_HOLD [get_bd_pins ModeFSM_0/MASTER_HOLD] [get_bd_pins PC_0/hold] [get_bd_pins orGate_0/a] [get_bd_pins FetchLatch_0/hold] [get_bd_pins ExecStage_0/hold]
  connect_bd_net -net PC_0_ena [get_bd_pins PC_0/ena] [get_bd_pins ramTop_0/enA]
  connect_bd_net -net PC_0_pc [get_bd_pins PC_0/pc] [get_bd_pins ramTop_0/instrAddr]
  connect_bd_net -net RegFileWriteArbiter_0_regFileWriteData [get_bd_pins RegFileWriteArbiter_0/regFileWriteData] [get_bd_pins RegFile_0/wd]
  connect_bd_net -net RegFileWriteArbiter_0_regFileWriteEnable [get_bd_pins RegFileWriteArbiter_0/regFileWriteEnable] [get_bd_pins RegFile_0/we]
  connect_bd_net -net RegFile_0_rd1 [get_bd_pins RegFile_0/rd1] [get_bd_pins ExecStage_0/rs1Val]
  connect_bd_net -net RegFile_0_rd2 [get_bd_pins RegFile_0/rd2] [get_bd_pins ExecStage_0/rs2Val]
  connect_bd_net -net RegFile_0_toEdge [get_bd_pins RegFile_0/toEdge] [get_bd_ports r1ToEdge]
  connect_bd_net -net clk_1 [get_bd_ports clk] [get_bd_pins Decode_0/clk] [get_bd_pins FetchLatch_0/clk] [get_bd_pins ModeFSM_0/clk] [get_bd_pins PC_0/clk] [get_bd_pins RegFile_0/clk] [get_bd_pins RegFileWriteArbiter_0/clk] [get_bd_pins ramTop_0/clk] [get_bd_pins ExecStage_0/clk]
  connect_bd_net -net orGate_0_y [get_bd_pins orGate_0/y] [get_bd_pins Decode_0/hold]
  connect_bd_net -net ramTop_0_addrAOut [get_bd_pins ramTop_0/addrAOut] [get_bd_pins FetchLatch_0/pc_in]
  connect_bd_net -net ramTop_0_addrBOut [get_bd_pins ramTop_0/addrBOut] [get_bd_ports addrB]
  connect_bd_net -net ramTop_0_busErr [get_bd_pins ramTop_0/busErr] [get_bd_ports busErr]
  connect_bd_net -net ramTop_0_doutA [get_bd_pins ramTop_0/doutA] [get_bd_pins FetchLatch_0/instr_in]
  connect_bd_net -net ramTop_0_doutB [get_bd_pins ramTop_0/doutB] [get_bd_pins RegFileWriteArbiter_0/memVal]
  connect_bd_net -net ramTop_0_readValidA [get_bd_pins ramTop_0/readValidA] [get_bd_pins FetchLatch_0/valid]
  connect_bd_net -net ramTop_0_readValidB [get_bd_pins ramTop_0/readValidB] [get_bd_pins RegFileWriteArbiter_0/memToReg]
  connect_bd_net -net ramTop_0_ready [get_bd_pins ramTop_0/ready] [get_bd_pins ModeFSM_0/ramReady]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_riscvTop()
cr_bd_riscvTop ""
set_property REGISTERED_WITH_MANAGER "1" [get_files riscvTop.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files riscvTop.bd ] 

if { [get_files MemInputCtrl.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/MemInputCtrl.v
}
if { [get_files dualPortRAM32kx32.xci] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/ips/dualPortRAM32kx32/dualPortRAM32kx32.xci
}
if { [get_files RamIO.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/RamIO.v
}
if { [get_files RomIO.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/RomIO.v
}
if { [get_files MemoryMappedIO.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/MemoryMappedIO.v
}
if { [get_files MemOutputCtrl.v] == "" } {
  import_files -quiet -fileset sources_1 /home/user/project/riscv2/src/MemOutputCtrl.v
}


# Proc to create BD ramTop
proc cr_bd_ramTop { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# MemInputCtrl, MemoryMappedIO, MemOutputCtrl



  # CHANGE DESIGN NAME HERE
  set design_name ramTop

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  MemInputCtrl\
  MemoryMappedIO\
  MemOutputCtrl\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set addrAOut [ create_bd_port -dir O -from 31 -to 0 addrAOut ]
  set addrBOut [ create_bd_port -dir O -from 31 -to 0 addrBOut ]
  set alu [ create_bd_port -dir I -from 31 -to 0 alu ]
  set clk [ create_bd_port -dir I clk ]
  set din [ create_bd_port -dir I -from 31 -to 0 din ]
  set doutA [ create_bd_port -dir O -from 31 -to 0 doutA ]
  set doutB [ create_bd_port -dir O -from 31 -to 0 doutB ]
  set enA [ create_bd_port -dir I enA ]
  set instrAddr [ create_bd_port -dir I -from 31 -to 0 instrAddr ]
  set memOp [ create_bd_port -dir I -from 1 -to 0 memOp ]
  set memSize [ create_bd_port -dir I -from 1 -to 0 memSize ]
  set readValidA [ create_bd_port -dir O readValidA ]
  set readValidB [ create_bd_port -dir O readValidB ]
  set ready [ create_bd_port -dir O ready ]
  set busErr [ create_bd_port -dir O busErr ]

  # Create instance: MemInputCtrl_0, and set properties
  set block_name MemInputCtrl
  set block_cell_name MemInputCtrl_0
  if { [catch {set MemInputCtrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $MemInputCtrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: MemoryMappedIO_0, and set properties
  set block_name MemoryMappedIO
  set block_cell_name MemoryMappedIO_0
  if { [catch {set MemoryMappedIO_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $MemoryMappedIO_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: MemOutputCtrl_0, and set properties
  set block_name MemOutputCtrl
  set block_cell_name MemOutputCtrl_0
  if { [catch {set MemOutputCtrl_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $MemOutputCtrl_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net MemInputCtrl_0_busErr [get_bd_pins MemInputCtrl_0/busErr] [get_bd_ports busErr]
  connect_bd_net -net MemInputCtrl_0_data [get_bd_pins MemInputCtrl_0/data] [get_bd_pins MemoryMappedIO_0/dinB]
  connect_bd_net -net MemInputCtrl_0_enB [get_bd_pins MemInputCtrl_0/enB] [get_bd_pins MemoryMappedIO_0/enB]
  connect_bd_net -net MemInputCtrl_0_wen [get_bd_pins MemInputCtrl_0/wen] [get_bd_pins MemoryMappedIO_0/weB]
  connect_bd_net -net MemOutputCtrl_0_data [get_bd_pins MemOutputCtrl_0/data] [get_bd_ports doutB]
  connect_bd_net -net MemOutputCtrl_0_instr [get_bd_pins MemOutputCtrl_0/instr] [get_bd_ports doutA]
  connect_bd_net -net MemoryMappedIO_0_addrOutA [get_bd_pins MemoryMappedIO_0/addrOutA] [get_bd_ports addrAOut]
  connect_bd_net -net MemoryMappedIO_0_addrOutB [get_bd_pins MemoryMappedIO_0/addrOutB] [get_bd_ports addrBOut] [get_bd_pins MemOutputCtrl_0/aluIn]
  connect_bd_net -net MemoryMappedIO_0_doutA [get_bd_pins MemoryMappedIO_0/doutA] [get_bd_pins MemOutputCtrl_0/memInstr]
  connect_bd_net -net MemoryMappedIO_0_doutB [get_bd_pins MemoryMappedIO_0/doutB] [get_bd_pins MemOutputCtrl_0/memOut]
  connect_bd_net -net MemoryMappedIO_0_memOp [get_bd_pins MemoryMappedIO_0/memOp] [get_bd_pins MemOutputCtrl_0/memOp]
  connect_bd_net -net MemoryMappedIO_0_memSize [get_bd_pins MemoryMappedIO_0/memSize] [get_bd_pins MemOutputCtrl_0/memSize]
  connect_bd_net -net MemoryMappedIO_0_readValidA [get_bd_pins MemoryMappedIO_0/readValidA] [get_bd_ports readValidA]
  connect_bd_net -net MemoryMappedIO_0_readValidB [get_bd_pins MemoryMappedIO_0/readValidB] [get_bd_ports readValidB]
  connect_bd_net -net MemoryMappedIO_0_ready [get_bd_pins MemoryMappedIO_0/ready] [get_bd_ports ready]
  connect_bd_net -net alu_1 [get_bd_ports alu] [get_bd_pins MemInputCtrl_0/aluIn] [get_bd_pins MemoryMappedIO_0/addrB]
  connect_bd_net -net clk_1 [get_bd_ports clk] [get_bd_pins MemoryMappedIO_0/clk]
  connect_bd_net -net din_1 [get_bd_ports din] [get_bd_pins MemInputCtrl_0/din]
  connect_bd_net -net enA_1 [get_bd_ports enA] [get_bd_pins MemoryMappedIO_0/enA]
  connect_bd_net -net instrAddr_1 [get_bd_ports instrAddr] [get_bd_pins MemoryMappedIO_0/addrA]
  connect_bd_net -net memOp_1 [get_bd_ports memOp] [get_bd_pins MemInputCtrl_0/memOp] [get_bd_pins MemoryMappedIO_0/memOpIn]
  connect_bd_net -net memSize_1 [get_bd_ports memSize] [get_bd_pins MemInputCtrl_0/memSize] [get_bd_pins MemoryMappedIO_0/memSizeIn]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_ramTop()
cr_bd_ramTop ""
set_property REGISTERED_WITH_MANAGER "1" [get_files ramTop.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files ramTop.bd ] 

set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z007sclg400-1 -flow {Vivado Synthesis 2023} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2023" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xc7z007sclg400-1" -objects $obj
set_property -name "incremental_checkpoint" -value "$proj_dir/riscv2.srcs/utils_1/imports/synth_1/hardwareWrapper.dcp" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z007sclg400-1 -flow {Vivado Implementation 2023} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2023" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "part" -value "xc7z007sclg400-1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
